name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Print project structure
        run: ./gradlew projects

      - name: Build shadow jars (exclude playwright-java)
        run: |
          ./gradlew clean \
            :app:shadowJar \
            :wd4j:shadowJar \
            :playwright-adapter:shadowJar

      - name: Determine version
        id: version
        run: |
          version=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          echo "current_version=$version" >> $GITHUB_ENV
          new_version=$(echo "$version" | awk -F. '{
            $NF += 1
            for (i = 1; i <= NF; i++) {
              printf "%s%s", $i, (i == NF ? "" : ".")
            }
          }')
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Update version in gradle.properties
        run: |
          sed -i "s/^version=.*$/version=$new_version/" gradle.properties
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add gradle.properties
          git commit -m "Bump version to $new_version"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push origin main

      - name: Create Git tag
        run: |
          git tag "v$new_version"
          git push origin "v$new_version"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.new_version }}"
          release_name: "Release v${{ env.new_version }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      # Upload JARs (nacheinander)

      - name: Find App JAR
        id: find_app_jar
        run: echo "jar_app=app/build/libs/$(ls app/build/libs | grep -- '-all.jar$')" >> $GITHUB_ENV

      - name: Upload App JAR
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.jar_app }}
          asset_name: WD4J-app-${{ env.new_version }}.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Find WD4J JAR
        id: find_wd4j_jar
        run: echo "jar_wd4j=wd4j/build/libs/$(ls wd4j/build/libs | grep -- '-all.jar$')" >> $GITHUB_ENV

      - name: Upload WD4J JAR
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.jar_wd4j }}
          asset_name: WD4J-core-${{ env.new_version }}.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Find Playwright-Adapter JAR
        id: find_adapter_jar
        run: echo "jar_adapter=playwright-adapter/build/libs/$(ls playwright-adapter/build/libs | grep -- '-all.jar$')" >> $GITHUB_ENV

      - name: Upload Playwright Adapter JAR
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.jar_adapter }}
          asset_name: WD4J-playwright-adapter-${{ env.new_version }}.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
